apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'jetty'

group = 'cn.edu.uestc.acmicpc'
version = '2.2.3'

description = """UESTC Online Judge"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

// Run under http://host/
jettyRun.contextPath = ""
jettyRunWar.contextPath = ""
jettyRun.httpPort = Integer.valueOf(httpPort)
jettyRunWar.httpPort = Integer.valueOf(httpPort)

task checkControllerDoNotContainDaos(type: Exec) {
  commandLine "python2",
      file("src/test/python/check_controller_not_contain_daos.py").absolutePath
}

task checkDtosDoNotContainEntities(type: Exec) {
  commandLine "python2",
      file("src/test/python/check_dtos_not_contain_entities.py").absolutePath
}

task checkTestingCodeAllDoNotUseJunit(type: Exec) {
  commandLine "python2",
      file("src/test/python/check_testing_code_all_not_use_junit.py").absolutePath
}

task generateDaos(type: Exec) {
  commandLine "python2",
      file("src/main/python/generate_daos.py").absolutePath,
      "-i", "src/main/java/cn/edu/uestc/acmicpc/db/entity/",
      "-o", "/src/gen/java/cn/edu/uestc/acmicpc/db/dao"
}

task generateDtos(type: Exec) {
  commandLine "python2",
      file("src/main/python/generate_dtos.py").absolutePath,
      "-i", "src/main/dto",
      "-o", "src/gen/java/cn/edu/uestc/acmicpc/db/dto"
}

task createSchema(type: Exec) {
  if (dbPassword == "") {
    commandLine "mysql", "-u$dbUser"
  } else {
    commandLine "mysql", "-u$dbUser", "-p$dbPassword"
  }
  standardInput = new FileInputStream(file("src/test/sql/uestcojtest.sql"))
}

task generateData(type: Exec) {
  if (dbPassword == "") {
    commandLine "mysql", "-u$dbUser"
  } else {
    commandLine "mysql", "-u$dbUser", "-p$dbPassword"
  }
  standardInput = new FileInputStream(file("src/test/sql/uestcojtest-data0.sql"))
}

task generateMainPropertyFile(type: Exec) {
  commandLine "bash", "scripts/configure_project.sh",
      "src/main/resources/resources.properties.template",
      "src/main/resources/resources.properties",
      "$dbName", "$dbUser", "$dbPassword",
      file(staticResourcePath).absolutePath,
      file(imagesPath).absolutePath,
      file(dataPath).absolutePath,
      file(uploadPath).absolutePath,
      file(judgeWorkPath).absolutePath,
      file(staticV2Path).absolutePath
}

task generateTestPropertyFile(type: Exec) {
  commandLine "bash", "scripts/configure_project.sh",
      "src/test/resources/resources.properties.template",
      "src/test/resources/resources.properties",
      "$testDbName", "$dbUser", "$dbPassword",
      file(staticResourcePath).absolutePath,
      file(imagesPath).absolutePath,
      file(dataPath).absolutePath,
      file(uploadPath).absolutePath,
      file(judgeWorkPath).absolutePath,
      file(staticV2Path).absolutePath
}

task cleanResources << {
  delete "src/main/resources/resources.properties"
  delete "src/test/resources/resources.properties"
  delete "src/gen/"
}

checkDtosDoNotContainEntities.dependsOn(generateDtos)
checkControllerDoNotContainDaos.dependsOn(generateDaos)
compileJava.dependsOn(checkControllerDoNotContainDaos)
compileJava.dependsOn(checkDtosDoNotContainEntities)
compileJava.dependsOn(checkTestingCodeAllDoNotUseJunit)
compileJava.dependsOn(createSchema)
compileJava.dependsOn(generateData)
generateData.dependsOn(createSchema)
compileJava.dependsOn(generateMainPropertyFile)
compileTestJava.dependsOn(generateTestPropertyFile)
clean.dependsOn(cleanResources)

// Build cdoj subproject after compile
compileJava {
  doLast {
    tasks.getByPath(":static:build").execute()
  }
}

configurations {
  provided
}

sourceSets {
  main {
    java {
      srcDirs = ["src/main/java", "src/gen/java"]
    }
  }
}

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {
  final asmGroup = 'org.ow2.asm'
  final asmVersion = '4.1'
  compile "$asmGroup:asm:$asmVersion"
  compile "$asmGroup:asm-analysis:$asmVersion"
  compile "$asmGroup:asm-tree:$asmVersion"
  compile "$asmGroup:asm-util:$asmVersion"

  final springGroup = 'org.springframework'
  final springVersion = '4.1.4.RELEASE'
  compile "$springGroup:spring-core:$springVersion"
  compile "$springGroup:spring-expression:$springVersion"
  compile "$springGroup:spring-beans:$springVersion"
  compile "$springGroup:spring-aop:$springVersion"
  compile "$springGroup:spring-context:$springVersion"
  compile "$springGroup:spring-context-support:$springVersion"
  compile "$springGroup:spring-tx:$springVersion"
  compile "$springGroup:spring-jdbc:$springVersion"
  compile "$springGroup:spring-orm:$springVersion"
  compile "$springGroup:spring-oxm:$springVersion"
  compile "$springGroup:spring-web:$springVersion"
  compile "$springGroup:spring-webmvc:$springVersion"
  compile "$springGroup:spring-webmvc-portlet:$springVersion"

  compile "cglib:cglib:2.2.2"
  compile "aopalliance:aopalliance:1.0"
  compile "javax.servlet:jstl:1.2"
  compile "com.alibaba:druid:1.0.4"
  compile "com.alibaba:fastjson:1.1.39"

  final jettyGroup = 'org.eclipse.jetty'
  final jettyVersion = '9.1.0.M0'
  compile "$jettyGroup:jetty-server:$jettyVersion"
  compile "$jettyGroup:jetty-servlet:$jettyVersion"
  compile "$jettyGroup:jetty-webapp:$jettyVersion"
  compile "$jettyGroup:jetty-servlets:$jettyVersion"
  compile "$jettyGroup:jetty-jsp:$jettyVersion"
  compile "$jettyGroup:jetty-util:$jettyVersion"

  final hibernateGroup = 'org.hibernate'
  final hibernateVersion = '4.3.0.Final'
  compile "$hibernateGroup:hibernate-core:$hibernateVersion"
  compile "$hibernateGroup:hibernate-validator:$hibernateVersion"
  compile "mysql:mysql-connector-java:5.1.22"

  final aspectjGroup = 'org.aspectj'
  final aspectjVersion = '1.7.1'
  compile "$aspectjGroup:aspectjweaver:$aspectjVersion"
  compile "$aspectjGroup:aspectjrt:$aspectjVersion"

  compile "log4j:log4j:1.2.17"
  compile "org.slf4j:slf4j-log4j12:1.7.5"

  compile "net.sourceforge.jexcelapi:jxl:2.6.12"
  compile "commons-io:commons-io:1.3.2"
  compile "commons-fileupload:commons-fileupload:1.3"
  compile "commons-lang:commons-lang:2.0"
  compile "org.apache.commons:commons-lang3:3.1"
  compile "javax.mail:mail:1.5.0-b01"
  compile "com.sun.mail:all:1.5.1"

  compile "net.sf.opencsv:opencsv:2.3"

  compile "com.google.collections:google-collections:1.0"

  testCompile "$springGroup:spring-test:$springVersion"
  testCompile "org.hamcrest:hamcrest-all:1.3"
  testCompile "com.jayway.jsonpath:json-path:0.8.1"
  testCompile(group: 'junit', name: 'junit', version: '4.12') {
    exclude(module: 'hamcrest-core')
  }
  testCompile "org.testng:testng:6.1.1"
  testCompile "org.mockito:mockito-all:1.9.5"
  testCompile "com.google.truth:truth:0.25"

  provided "javax.servlet:jsp-api:2.0"
  provided "org.glassfish:javax.servlet:3.0"
  provided "javax.servlet:servlet-api:3.0-alpha-1"
}

test {
  doFirst {
    jettyRun.daemon = true
    task(":jettyRun").execute()
  }
  doLast {
    task(":jettyStop").execute()
  }
  useTestNG()
}

checkstyle {
  toolVersion = "6.0"
}

checkstyleMain.source = "src/main/java"

jacoco {
  toolVersion = "0.7.0.201403182114"
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

task release {
  doFirst {
    delete "build/release"
    // War
    war.execute()
  }
  doLast {
    copy {
      from war
      into "build/release/war"
    }
    copy {
      from "release_template/gradle.properties"
      into "build/release"
    }
    // js
    copy {
      into "build/release/resources/dist/js"
      from("static/dist/js") {
        include "cdoj.min.js"
      }
    }
    // css
    copy {
      into "build/release/resources/dist/css"
      from("static/dist/css") {
        include "cdoj.min.css"
      }
    }
    // MathJax
    copy {
      into "build/release/resources/bower_components/MathJax"
      from "static/bower_components/MathJax"
    }
    // font-awesome
    copy {
      into "build/release/resources/bower_components/font-awesome"
      from "static/bower_components/font-awesome"
    }
    // Images
    copy {
      into "build/release/resources/images"
      from "static/images"
    }
    // Data
    copy {
      into "build/release/data"
      from "data"
    }
  }
}
